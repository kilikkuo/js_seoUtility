var assert=require("assert"),util=require("util");let preDefinedRawRules=[{tag:"img",attr:"alt"},{tag:"a",attr:"rel"},{tag:"head",childtag:"title"},{tag:"head",childtag:"meta",childattr:"name",childval:"descriptions"},{tag:"head",childtag:"meta",childattr:"name",childval:"keywords"},{tag:"strong",count:15},{tag:"h1",count:1}];class SEOBaseRule{constructor(seo,param){this.seo=seo,assert("tag"in param,"Target tag should be contained in parameters"),this.mainTag=param.tag,this.numOfExists=0}evalutate(){return assert(!1,"Should be implemented by derived class."),"unknonw"}}class WithoutAttrRule extends SEOBaseRule{constructor(seo,param){super(seo,param),assert("attr"in param,"Target attribute should be contained in parameters"),this.mainAttr=param.attr}evalutate(){var matchedTags=this.seo.findAllMatches(this.mainTag);for(let m of matchedTags)m&&m.content.includes(this.mainAttr)&&(this.numOfExists+=1);var numOfTags=null!=matchedTags?matchedTags.length:0;return`Total number of <${this.mainTag}> tag : ${numOfTags} ==> ${this.numOfExists} of them with attribute : ${this.mainAttr}.`}}class ChildTagExistRule extends SEOBaseRule{constructor(seo,param){super(seo,param),assert("childtag"in param,"Target child tag should be contained in parameters."),this.childTag=param.childtag}evalutate(){var matchedTags=this.seo.findAllMatches(this.childTag);for(let m of matchedTags)m.parent&&m.parent.name==this.mainTag&&(this.numOfExists+=1);null!=matchedTags&&matchedTags.length;return`In <${this.mainTag}>, there are ${this.numOfExists} child tag <${this.childTag}>.`}}class ChildTagAttrValExistRule extends SEOBaseRule{constructor(seo,param){super(seo,param),assert("childtag"in param,"Target child tag should be contained in parameters."),assert("childattr"in param,"Target child tag attribute should be contained in parameters."),assert("childval"in param,"Target child tag value should be contained in parameters."),this.childTag=param.childtag,this.childTagAttr=param.childattr,this.childTagVal=param.childval,this.target1=this.childTagAttr+'="'+this.childTagVal+'"',this.target2=this.childTagAttr+"='"+this.childTagVal+"'"}evalutate(){var matchedTags=this.seo.findAllMatches(this.childTag);for(let m of matchedTags)m.parent&&m.parent.name==this.mainTag&&(m.content.includes(this.target1)||m.content.includes(this.target2))&&(this.numOfExists+=1);null!=matchedTags&&matchedTags.length;return`In <${this.mainTag}>, there are ${this.numOfExists} child tag <${this.childTag}> with attribute-value : ${this.target1}.`}}class TagCountRule extends SEOBaseRule{constructor(seo,param){super(seo,param),assert("count"in param,"Target count should be contained in parameters"),this.critiria=param.count}evalutate(){var matchedTags=this.seo.findAllMatches(this.mainTag),numOfTags=null!=matchedTags?matchedTags.length:0;return`In this HTML, there are ${numOfTags} (${numOfTags>=this.critiria?"more than or equal to":"less than"} ${this.critiria}) <${this.mainTag}>.`}}const TYPE_BASIC=0,TYPE_ATTR_EXIST=1,TYPE_CHILDTAG_EXIST=2,TYPE_CHILDTAG_ATTR_VAL=3,TYPE_TAG_COUNT=4;function translateRuleToMsg(rule){var msg="";return"childattr"in rule?msg=`In <${rule.tag}>, check if <${rule.childtag}> has '${rule.childattr}=${rule.childval}'.`:"childtag"in rule?msg=`In <${rule.tag}>, check if there is '<${rule.childtag}>'.`:"attr"in rule?msg=`Check if <${rule.tag}> has attribute '${rule.attr}'.`:"count"in rule&&(msg=`Check if there is more than ${rule.count} <${rule.tag}> tag in this HTML.`),msg}function getRuleTypeByParam(param){return"childtag"in param?"childattr"in param?TYPE_CHILDTAG_ATTR_VAL:TYPE_CHILDTAG_EXIST:"count"in param?TYPE_TAG_COUNT:"attr"in param?TYPE_ATTR_EXIST:TYPE_BASIC}function createSEORulesByType(seo,param){switch(getRuleTypeByParam(param)){case TYPE_ATTR_EXIST:return new WithoutAttrRule(seo,param);case TYPE_CHILDTAG_EXIST:return new ChildTagExistRule(seo,param);case TYPE_CHILDTAG_ATTR_VAL:return new ChildTagAttrValExistRule(seo,param);case TYPE_TAG_COUNT:return new TagCountRule(seo,param);case TYPE_BASIC:default:return new SEOBaseRule(seo,param)}}function createRawRuleByTagAttr(tag,attr){return{tag:tag.toLowerCase(),attr:attr.toLowerCase()}}function createRawRuleByTagChildTag(tag,childTag){return{tag:tag.toLowerCase(),childtag:childTag.toLowerCase()}}function createRawRuleByTagChildTagAttrVal(tag,childTag,childAttr,childVal){return{tag:tag.toLowerCase(),childtag:childTag.toLowerCase(),childattr:childAttr.toLowerCase(),childval:childVal.toLowerCase()}}function createRawRuleByTagAmount(tag,amount){return{tag:tag.toLowerCase(),count:amount}}module.exports={createSEORulesByType,translateRuleToMsg,preDefinedRawRules,createRawRuleByTagAttr,createRawRuleByTagChildTag,createRawRuleByTagChildTagAttrVal,createRawRuleByTagAmount};